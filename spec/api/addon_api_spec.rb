=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::AddonApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AddonApi' do
  before do
    # run before each test
    @instance = SwaggerClient::AddonApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AddonApi' do
    it 'should create an instact of AddonApi' do
      expect(@instance).to be_instance_of(SwaggerClient::AddonApi)
    end
  end

  # unit tests for add_addon
  # Create a new addon
  # 
  # @param name Name of the type of addon
  # @param base_prices Prices for addon
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description Description of the addon
  # @return [InlineResponse2002]
  describe 'add_addon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_addon
  # Delete an addon by ID
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :body ID of the Addon
  # @return [InlineResponse2003]
  describe 'delete_addon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_addon
  # Retrieve an addon by ID
  # 
  # @param id ID of the addon to be retrieved
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'get_addon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_addons
  # Retrieve all addons
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Addon>]
  describe 'get_all_addons test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_with_trashed_addons
  # Retrieve all addons including any deleted models
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Addon>]
  describe 'get_all_with_trashed_addons test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_addon
  # Update an Addon
  # Updates the addon by id using the specified fields
  # @param id ID of the Addon to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Name of the Addon
  # @option opts [String] :description Description of the Addon
  # @return [InlineResponse2002]
  describe 'update_addon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
