=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CourseApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CourseApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CourseApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CourseApi' do
    it 'should create an instact of CourseApi' do
      expect(@instance).to be_instance_of(SwaggerClient::CourseApi)
    end
  end

  # unit tests for create_course
  # Create a new course
  # 
  # @param name 
  # @param description 
  # @param capacity 
  # @param prices 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :certificate_id 
  # @option opts [Array<Integer>] :tickets 
  # @option opts [Array<Integer>] :trainings 
  # @return [InlineResponse20027]
  describe 'create_course test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_course
  # Delete a course by ID
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'delete_course test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_course
  # Update a course by ID
  # 
  # @param id 
  # @param name 
  # @param description 
  # @param capacity 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :certificate_id 
  # @option opts [Array<Integer>] :tickets 
  # @option opts [Array<Integer>] :trainings 
  # @return [InlineResponse20028]
  describe 'edit_course test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_courses
  # Retrieve all courses including any deleted models
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Course>]
  describe 'get_all_courses test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_with_trashed_courses
  # Retrieve all courses including any deleted models
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Course>]
  describe 'get_all_with_trashed_courses test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_course
  # Retrieve a course by ID
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id 
  # @return [InlineResponse20027]
  describe 'get_course test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
