=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::BookingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BookingApi' do
  before do
    # run before each test
    @instance = SwaggerClient::BookingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BookingApi' do
    it 'should create an instact of BookingApi' do
      expect(@instance).to be_instance_of(SwaggerClient::BookingApi)
    end
  end

  # unit tests for add_booking_detail
  # Add a package / course / ticket with its session to the booking
  # 
  # @param booking_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ticket_id 
  # @option opts [Integer] :session_id 
  # @option opts [Integer] :boatroom_id 
  # @option opts [Integer] :training_session_id 
  # @option opts [BOOLEAN] :temporary 
  # @option opts [Integer] :package_id 
  # @option opts [Integer] :packagefacade_id 
  # @option opts [Integer] :course_id 
  # @return [InlineResponse20010]
  describe 'add_booking_detail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attach_accommodation
  # Attach an accommodation booking to a booking
  # 
  # @param booking_id 
  # @param accommodation_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :start 
  # @option opts [Date] :_end 
  # @return [InlineResponse2008]
  describe 'attach_accommodation test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attach_addon
  # Attach an addon to a trip of a booking
  # 
  # @param booking_id 
  # @param bookingdetail_id 
  # @param addon_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :quantity 
  # @option opts [Integer] :packagefacade_id 
  # @return [InlineResponse2009]
  describe 'attach_addon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attach_pickup
  # Attach a pickup location for a booking
  # 
  # @param booking_id 
  # @param location 
  # @param date 
  # @param time 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20011]
  describe 'attach_pickup test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cancel_booking
  # Cancel a booking
  # 
  # @param booking_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'cancel_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for confirm_booking
  # Confirm a booking and all of its sessions and notify the lead customer
  # 
  # @param booking_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20012]
  describe 'confirm_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_booking
  # Delete a booking by ID
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'delete_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dettach_accommodation
  # Dettach an accommodation booking to a booking
  # 
  # @param booking_id 
  # @param accommodation_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :start 
  # @return [InlineResponse20017]
  describe 'dettach_accommodation test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dettach_addon
  # Dettach an addon to a trip of a booking
  # 
  # @param booking_id 
  # @param bookingdetail_id 
  # @param addon_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :packagefacade_id 
  # @return [InlineResponse20017]
  describe 'dettach_addon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dettach_pickup
  # Dettach a pickup location for a booking
  # 
  # @param booking_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id 
  # @return [InlineResponse2003]
  describe 'dettach_pickup test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_booking_info
  # Edit the information related to a booking
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :booking_id 
  # @option opts [Float] :discount 
  # @option opts [String] :comment 
  # @return [InlineResponse20014]
  describe 'edit_booking_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_bookings
  # Get all bookings matching a filter
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reference 
  # @option opts [Date] :date 
  # @option opts [String] :lastname 
  # @return [InlineResponse20013]
  describe 'filter_bookings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_bookings
  # Retrieve all bookings
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Booking>]
  describe 'get_all_bookings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_with_trashed_bookings
  # Retrieve all bookings including any deleted models
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Booking>]
  describe 'get_all_with_trashed_bookings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_booking
  # Retrieve a booking by ID
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2007]
  describe 'get_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_bookings
  # Get all bookings for a customer
  # 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'get_customer_bookings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payments
  # Retrieve all payments made for a booking
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :booking_id 
  # @return [InlineResponse20015]
  describe 'get_payments test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_refunds
  # Retrieve all refunds for a booking
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :booking_id 
  # @return [InlineResponse20016]
  describe 'get_refunds test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_todays_bookings
  # Get all bookings made today
  # 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'get_todays_bookings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tommorows_bookings
  # Get all bookings made today
  # 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'get_tommorows_bookings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for init_booking
  # Create a new empty booking
  # 
  # @param source 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :agent_id 
  # @option opts [String] :agent_reference 
  # @return [InlineResponse201]
  describe 'init_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_booking_detail
  # Remove a detail from a booking
  # 
  # @param booking_id 
  # @param bookingdetail_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20017]
  describe 'remove_booking_detail test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for resend_confirmation
  # Resend the confirmation email to the lead customer
  # 
  # @param booking_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'resend_confirmation test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reserve_booking
  # Reserve a booking and its sessions capcity until a set date
  # 
  # @param booking_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :reserved_until 
  # @return [InlineResponse20018]
  describe 'reserve_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_booking
  # Save a booking as a quote and release all capacity of sessions
  # 
  # @param booking_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'save_booking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_lead_customer
  # Set the lead customer for a booking
  # 
  # @param booking_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'set_lead_customer test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
