=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::TicketApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TicketApi' do
  before do
    # run before each test
    @instance = SwaggerClient::TicketApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TicketApi' do
    it 'should create an instact of TicketApi' do
      expect(@instance).to be_instance_of(SwaggerClient::TicketApi)
    end
  end

  # unit tests for add_ticket
  # Create a new ticket
  # 
  # @param name 
  # @param trips 
  # @param prices 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description 
  # @option opts [Date] :available_from 
  # @option opts [Date] :available_until 
  # @option opts [BOOLEAN] :only_packaged 
  # @option opts [Array<Integer>] :boats 
  # @option opts [Array<Integer>] :boatrooms 
  # @return [InlineResponse2014]
  describe 'add_ticket test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ticket
  # Delete a ticket
  # 
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2014]
  describe 'delete_ticket test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_ticket
  # Update an existing ticket
  # 
  # @param id 
  # @param name 
  # @param trips 
  # @param prices 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description 
  # @option opts [Date] :available_from 
  # @option opts [Date] :available_until 
  # @option opts [BOOLEAN] :only_packaged 
  # @option opts [Array<Integer>] :boats 
  # @option opts [Array<Integer>] :boatrooms 
  # @return [InlineResponse2014]
  describe 'edit_ticket test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_available_tickets
  # Retrieve all tickets that are available to booked today
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Ticket>]
  describe 'get_all_available_tickets test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_tickets
  # Retrieve all tickets
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Ticket>]
  describe 'get_all_tickets test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_with_trashed_tickets
  # Retrieve all tickets
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Ticket>]
  describe 'get_all_with_trashed_tickets test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ticket
  # Retrieve a ticket by ID
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Ticket]
  describe 'get_ticket test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
