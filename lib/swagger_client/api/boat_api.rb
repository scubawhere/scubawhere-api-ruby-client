=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class BoatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new boat
    # 
    # @param name 
    # @param capacity 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [InlineResponse2005]
    def create_boat(name, capacity, opts = {})
      data, _status_code, _headers = create_boat_with_http_info(name, capacity, opts)
      return data
    end

    # Create a new boat
    # 
    # @param name 
    # @param capacity 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def create_boat_with_http_info(name, capacity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BoatApi.create_boat ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling BoatApi.create_boat" if name.nil?
      # verify the required parameter 'capacity' is set
      fail ArgumentError, "Missing the required parameter 'capacity' when calling BoatApi.create_boat" if capacity.nil?
      # resource path
      local_var_path = "/boat/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'capacity'] = capacity
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'boatrooms'] = @api_client.build_collection_param(opts[:'boatrooms'], :multi) if !opts[:'boatrooms'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BoatApi#create_boat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a boat by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def delete_boat(id, opts = {})
      data, _status_code, _headers = delete_boat_with_http_info(id, opts)
      return data
    end

    # Delete a boat by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def delete_boat_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BoatApi.delete_boat ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BoatApi.delete_boat" if id.nil?
      # resource path
      local_var_path = "/boat/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BoatApi#delete_boat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a boat by ID
    # 
    # @param name 
    # @param capacity 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [InlineResponse2004]
    def edit_boat(name, capacity, opts = {})
      data, _status_code, _headers = edit_boat_with_http_info(name, capacity, opts)
      return data
    end

    # Update a boat by ID
    # 
    # @param name 
    # @param capacity 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def edit_boat_with_http_info(name, capacity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BoatApi.edit_boat ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling BoatApi.edit_boat" if name.nil?
      # verify the required parameter 'capacity' is set
      fail ArgumentError, "Missing the required parameter 'capacity' when calling BoatApi.edit_boat" if capacity.nil?
      # resource path
      local_var_path = "/boat/edit".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'capacity'] = capacity
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'boatrooms'] = @api_client.build_collection_param(opts[:'boatrooms'], :multi) if !opts[:'boatrooms'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BoatApi#edit_boat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all boats
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Boat>]
    def get_all_boats(opts = {})
      data, _status_code, _headers = get_all_boats_with_http_info(opts)
      return data
    end

    # Retrieve all boats
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Boat>, Fixnum, Hash)>] Array<Boat> data, response status code and response headers
    def get_all_boats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BoatApi.get_all_boats ..."
      end
      # resource path
      local_var_path = "/boat/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Boat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BoatApi#get_all_boats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all agents including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Boat>]
    def get_all_with_trashed_boats(opts = {})
      data, _status_code, _headers = get_all_with_trashed_boats_with_http_info(opts)
      return data
    end

    # Retrieve all agents including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Boat>, Fixnum, Hash)>] Array<Boat> data, response status code and response headers
    def get_all_with_trashed_boats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BoatApi.get_all_with_trashed_boats ..."
      end
      # resource path
      local_var_path = "/boat/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Boat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BoatApi#get_all_with_trashed_boats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a boat by ID
    # 
    # @param id ID of the boat to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def get_boat(id, opts = {})
      data, _status_code, _headers = get_boat_with_http_info(id, opts)
      return data
    end

    # Retrieve a boat by ID
    # 
    # @param id ID of the boat to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def get_boat_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BoatApi.get_boat ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BoatApi.get_boat" if id.nil?
      # resource path
      local_var_path = "/boat".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BoatApi#get_boat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
