=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class AccommodationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Create an accommodation
    # @param name Name of the type of accommodation
    # @param capacity Number of beds in the accommodation
    # @param base_prices Price of the accommodation and the dates of when the price is applicable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the accommodation
    # @return [InlineResponse200]
    def add_accommodation(name, capacity, base_prices, opts = {})
      data, _status_code, _headers = add_accommodation_with_http_info(name, capacity, base_prices, opts)
      return data
    end

    # 
    # Create an accommodation
    # @param name Name of the type of accommodation
    # @param capacity Number of beds in the accommodation
    # @param base_prices Price of the accommodation and the dates of when the price is applicable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the accommodation
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def add_accommodation_with_http_info(name, capacity, base_prices, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.add_accommodation ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling AccommodationApi.add_accommodation" if name.nil?
      # verify the required parameter 'capacity' is set
      fail ArgumentError, "Missing the required parameter 'capacity' when calling AccommodationApi.add_accommodation" if capacity.nil?
      # verify the required parameter 'base_prices' is set
      fail ArgumentError, "Missing the required parameter 'base_prices' when calling AccommodationApi.add_accommodation" if base_prices.nil?
      # resource path
      local_var_path = "/accommodation/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'capacity'] = capacity
      query_params[:'base_prices'] = base_prices
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#add_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an accommodation by ID
    # 
    # @param body ID of the accommodation
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def delete_accommodation(body, opts = {})
      data, _status_code, _headers = delete_accommodation_with_http_info(body, opts)
      return data
    end

    # Delete an accommodation by ID
    # 
    # @param body ID of the accommodation
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def delete_accommodation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.delete_accommodation ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling AccommodationApi.delete_accommodation" if body.nil?
      # resource path
      local_var_path = "/accommodation/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'body'] = body

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#delete_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new agent
    # 
    # @param id 
    # @param name 
    # @param branch_name 
    # @param branch_address 
    # @param branch_phone 
    # @param branch_email 
    # @param commission 
    # @param terms 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :website 
    # @option opts [String] :billing_address 
    # @option opts [String] :billing_phone 
    # @option opts [String] :billing_email 
    # @return [InlineResponse2004]
    def edit_agent(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, opts = {})
      data, _status_code, _headers = edit_agent_with_http_info(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, opts)
      return data
    end

    # Create a new agent
    # 
    # @param id 
    # @param name 
    # @param branch_name 
    # @param branch_address 
    # @param branch_phone 
    # @param branch_email 
    # @param commission 
    # @param terms 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :website 
    # @option opts [String] :billing_address 
    # @option opts [String] :billing_phone 
    # @option opts [String] :billing_email 
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def edit_agent_with_http_info(id, name, branch_name, branch_address, branch_phone, branch_email, commission, terms, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.edit_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AccommodationApi.edit_agent" if id.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling AccommodationApi.edit_agent" if name.nil?
      # verify the required parameter 'branch_name' is set
      fail ArgumentError, "Missing the required parameter 'branch_name' when calling AccommodationApi.edit_agent" if branch_name.nil?
      # verify the required parameter 'branch_address' is set
      fail ArgumentError, "Missing the required parameter 'branch_address' when calling AccommodationApi.edit_agent" if branch_address.nil?
      # verify the required parameter 'branch_phone' is set
      fail ArgumentError, "Missing the required parameter 'branch_phone' when calling AccommodationApi.edit_agent" if branch_phone.nil?
      # verify the required parameter 'branch_email' is set
      fail ArgumentError, "Missing the required parameter 'branch_email' when calling AccommodationApi.edit_agent" if branch_email.nil?
      # verify the required parameter 'commission' is set
      fail ArgumentError, "Missing the required parameter 'commission' when calling AccommodationApi.edit_agent" if commission.nil?
      # verify the required parameter 'terms' is set
      fail ArgumentError, "Missing the required parameter 'terms' when calling AccommodationApi.edit_agent" if terms.nil?
      # resource path
      local_var_path = "/agent/edit".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'name'] = name
      query_params[:'branch_name'] = branch_name
      query_params[:'branch_address'] = branch_address
      query_params[:'branch_phone'] = branch_phone
      query_params[:'branch_email'] = branch_email
      query_params[:'commission'] = commission
      query_params[:'terms'] = terms
      query_params[:'website'] = opts[:'website'] if !opts[:'website'].nil?
      query_params[:'billing_address'] = opts[:'billing_address'] if !opts[:'billing_address'].nil?
      query_params[:'billing_phone'] = opts[:'billing_phone'] if !opts[:'billing_phone'].nil?
      query_params[:'billing_email'] = opts[:'billing_email'] if !opts[:'billing_email'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#edit_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the accommodations matching a filter
    # Get all the accommodations and their bookings between certain dates and / or an accommodation id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :before The date for the upper boundary of the dates
    # @option opts [Date] :after The date for the lower boundary of the dates
    # @option opts [Integer] :accommodation_id ID Accommodation to filter by
    # @return [InlineResponse200]
    def filter_accommodation(opts = {})
      data, _status_code, _headers = filter_accommodation_with_http_info(opts)
      return data
    end

    # Get all the accommodations matching a filter
    # Get all the accommodations and their bookings between certain dates and / or an accommodation id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :before The date for the upper boundary of the dates
    # @option opts [Date] :after The date for the lower boundary of the dates
    # @option opts [Integer] :accommodation_id ID Accommodation to filter by
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def filter_accommodation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.filter_accommodation ..."
      end
      # resource path
      local_var_path = "/accommodation/filter".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'accommodation_id'] = opts[:'accommodation_id'] if !opts[:'accommodation_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#filter_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve an accommodation by ID
    # @param id ID of the accommodation to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def find_accommodation(id, opts = {})
      data, _status_code, _headers = find_accommodation_with_http_info(id, opts)
      return data
    end

    # 
    # Retrieve an accommodation by ID
    # @param id ID of the accommodation to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def find_accommodation_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.find_accommodation ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AccommodationApi.find_accommodation" if id.nil?
      # resource path
      local_var_path = "/accommodation".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = @api_client.build_collection_param(id, :multi)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#find_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve all accommodation
    # @param [Hash] opts the optional parameters
    # @return [Array<Accommodation>]
    def get_all_accommodations(opts = {})
      data, _status_code, _headers = get_all_accommodations_with_http_info(opts)
      return data
    end

    # 
    # Retrieve all accommodation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Accommodation>, Fixnum, Hash)>] Array<Accommodation> data, response status code and response headers
    def get_all_accommodations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.get_all_accommodations ..."
      end
      # resource path
      local_var_path = "/accommodations/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Accommodation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#get_all_accommodations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all accommodation including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Accommodation>]
    def get_all_with_trashed_accommodations(opts = {})
      data, _status_code, _headers = get_all_with_trashed_accommodations_with_http_info(opts)
      return data
    end

    # Retrieve all accommodation including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Accommodation>, Fixnum, Hash)>] Array<Accommodation> data, response status code and response headers
    def get_all_with_trashed_accommodations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.get_all_with_trashed_accommodations ..."
      end
      # resource path
      local_var_path = "/accommodations/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Accommodation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#get_all_with_trashed_accommodations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Accommodation
    # Updates the accommodation by id using the specified fields
    # @param id ID of the Accommodation to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the Accommodation
    # @option opts [Integer] :capacity Number of rooms the accommodation holds
    # @return [InlineResponse200]
    def update_accommodation(id, opts = {})
      data, _status_code, _headers = update_accommodation_with_http_info(id, opts)
      return data
    end

    # Update an Accommodation
    # Updates the accommodation by id using the specified fields
    # @param id ID of the Accommodation to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the Accommodation
    # @option opts [Integer] :capacity Number of rooms the accommodation holds
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def update_accommodation_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccommodationApi.update_accommodation ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AccommodationApi.update_accommodation" if id.nil?
      # resource path
      local_var_path = "/accommodation/edit".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'capacity'] = opts[:'capacity'] if !opts[:'capacity'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccommodationApi#update_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
