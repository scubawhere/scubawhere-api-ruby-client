=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class AgentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new agent
    # 
    # @param name 
    # @param branch_name 
    # @param branch_address 
    # @param branch_phone 
    # @param branch_email 
    # @param commission 
    # @param terms 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :website 
    # @option opts [String] :billing_address 
    # @option opts [String] :billing_phone 
    # @option opts [String] :billing_email 
    # @return [InlineResponse2004]
    def create_agent(name, branch_name, branch_address, branch_phone, branch_email, commission, terms, opts = {})
      data, _status_code, _headers = create_agent_with_http_info(name, branch_name, branch_address, branch_phone, branch_email, commission, terms, opts)
      return data
    end

    # Create a new agent
    # 
    # @param name 
    # @param branch_name 
    # @param branch_address 
    # @param branch_phone 
    # @param branch_email 
    # @param commission 
    # @param terms 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :website 
    # @option opts [String] :billing_address 
    # @option opts [String] :billing_phone 
    # @option opts [String] :billing_email 
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def create_agent_with_http_info(name, branch_name, branch_address, branch_phone, branch_email, commission, terms, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgentApi.create_agent ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling AgentApi.create_agent" if name.nil?
      # verify the required parameter 'branch_name' is set
      fail ArgumentError, "Missing the required parameter 'branch_name' when calling AgentApi.create_agent" if branch_name.nil?
      # verify the required parameter 'branch_address' is set
      fail ArgumentError, "Missing the required parameter 'branch_address' when calling AgentApi.create_agent" if branch_address.nil?
      # verify the required parameter 'branch_phone' is set
      fail ArgumentError, "Missing the required parameter 'branch_phone' when calling AgentApi.create_agent" if branch_phone.nil?
      # verify the required parameter 'branch_email' is set
      fail ArgumentError, "Missing the required parameter 'branch_email' when calling AgentApi.create_agent" if branch_email.nil?
      # verify the required parameter 'commission' is set
      fail ArgumentError, "Missing the required parameter 'commission' when calling AgentApi.create_agent" if commission.nil?
      # verify the required parameter 'terms' is set
      fail ArgumentError, "Missing the required parameter 'terms' when calling AgentApi.create_agent" if terms.nil?
      # resource path
      local_var_path = "/agent/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'branch_name'] = branch_name
      query_params[:'branch_address'] = branch_address
      query_params[:'branch_phone'] = branch_phone
      query_params[:'branch_email'] = branch_email
      query_params[:'commission'] = commission
      query_params[:'terms'] = terms
      query_params[:'website'] = opts[:'website'] if !opts[:'website'].nil?
      query_params[:'billing_address'] = opts[:'billing_address'] if !opts[:'billing_address'].nil?
      query_params[:'billing_phone'] = opts[:'billing_phone'] if !opts[:'billing_phone'].nil?
      query_params[:'billing_email'] = opts[:'billing_email'] if !opts[:'billing_email'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentApi#create_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an agent by ID
    # 
    # @param id ID of the Agent
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def delete_agent(id, opts = {})
      data, _status_code, _headers = delete_agent_with_http_info(id, opts)
      return data
    end

    # Delete an agent by ID
    # 
    # @param id ID of the Agent
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def delete_agent_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgentApi.delete_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AgentApi.delete_agent" if id.nil?
      # resource path
      local_var_path = "/agent/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentApi#delete_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an agent by ID
    # 
    # @param id ID of the agent to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_agent(id, opts = {})
      data, _status_code, _headers = get_agent_with_http_info(id, opts)
      return data
    end

    # Retrieve an agent by ID
    # 
    # @param id ID of the agent to be retrieved
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_agent_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgentApi.get_agent ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AgentApi.get_agent" if id.nil?
      # resource path
      local_var_path = "/agent".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentApi#get_agent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all agents
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def get_all_agents(opts = {})
      data, _status_code, _headers = get_all_agents_with_http_info(opts)
      return data
    end

    # Retrieve all agents
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Fixnum, Hash)>] Array<Agent> data, response status code and response headers
    def get_all_agents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgentApi.get_all_agents ..."
      end
      # resource path
      local_var_path = "/agent/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Agent>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentApi#get_all_agents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all agents including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Agent>]
    def get_all_with_trashed_agents(opts = {})
      data, _status_code, _headers = get_all_with_trashed_agents_with_http_info(opts)
      return data
    end

    # Retrieve all agents including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Agent>, Fixnum, Hash)>] Array<Agent> data, response status code and response headers
    def get_all_with_trashed_agents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AgentApi.get_all_with_trashed_agents ..."
      end
      # resource path
      local_var_path = "/agent/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Agent>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AgentApi#get_all_with_trashed_agents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
