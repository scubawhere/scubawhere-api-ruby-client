=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class PaymentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new payment
    # 
    # @param booking_id 
    # @param paymentgateway_id 
    # @param amount 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2011]
    def add_payment(booking_id, paymentgateway_id, amount, opts = {})
      data, _status_code, _headers = add_payment_with_http_info(booking_id, paymentgateway_id, amount, opts)
      return data
    end

    # Create a new payment
    # 
    # @param booking_id 
    # @param paymentgateway_id 
    # @param amount 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2011, Fixnum, Hash)>] InlineResponse2011 data, response status code and response headers
    def add_payment_with_http_info(booking_id, paymentgateway_id, amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.add_payment ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling PaymentApi.add_payment" if booking_id.nil?
      # verify the required parameter 'paymentgateway_id' is set
      fail ArgumentError, "Missing the required parameter 'paymentgateway_id' when calling PaymentApi.add_payment" if paymentgateway_id.nil?
      # verify the required parameter 'amount' is set
      fail ArgumentError, "Missing the required parameter 'amount' when calling PaymentApi.add_payment" if amount.nil?
      # resource path
      local_var_path = "/payment/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'paymentgateway_id'] = paymentgateway_id
      query_params[:'amount'] = amount

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#add_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all payments that match a filter
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :after Date of the earliest payment
    # @option opts [Date] :before Date of the latest payment to be retrieved
    # @return [InlineResponse20035]
    def filter_payments(opts = {})
      data, _status_code, _headers = filter_payments_with_http_info(opts)
      return data
    end

    # Retrieve all payments that match a filter
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :after Date of the earliest payment
    # @option opts [Date] :before Date of the latest payment to be retrieved
    # @return [Array<(InlineResponse20035, Fixnum, Hash)>] InlineResponse20035 data, response status code and response headers
    def filter_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.filter_payments ..."
      end
      # resource path
      local_var_path = "/payment/filter".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20035')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#filter_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all payments made
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Payment>]
    def get_all_payments(opts = {})
      data, _status_code, _headers = get_all_payments_with_http_info(opts)
      return data
    end

    # Retrieve all payments made
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Payment>, Fixnum, Hash)>] Array<Payment> data, response status code and response headers
    def get_all_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.get_all_payments ..."
      end
      # resource path
      local_var_path = "/payment/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Payment>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#get_all_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a payment by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20034]
    def get_payment(id, opts = {})
      data, _status_code, _headers = get_payment_with_http_info(id, opts)
      return data
    end

    # Retrieve a payment by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20034, Fixnum, Hash)>] InlineResponse20034 data, response status code and response headers
    def get_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.get_payment ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling PaymentApi.get_payment" if id.nil?
      # resource path
      local_var_path = "/payment".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20034')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#get_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the payment gateways
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20036]
    def get_payment_gateways(opts = {})
      data, _status_code, _headers = get_payment_gateways_with_http_info(opts)
      return data
    end

    # Retrieve all the payment gateways
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20036, Fixnum, Hash)>] InlineResponse20036 data, response status code and response headers
    def get_payment_gateways_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.get_payment_gateways ..."
      end
      # resource path
      local_var_path = "/payment/paymentgateways".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20036')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#get_payment_gateways\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
