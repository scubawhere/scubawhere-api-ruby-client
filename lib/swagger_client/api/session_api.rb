=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class SessionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new session
    # 
    # @param start 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :boat_id 
    # @option opts [Integer] :trip_id 
    # @return [InlineResponse20043]
    def create_session(start, opts = {})
      data, _status_code, _headers = create_session_with_http_info(start, opts)
      return data
    end

    # Create a new session
    # 
    # @param start 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :boat_id 
    # @option opts [Integer] :trip_id 
    # @return [Array<(InlineResponse20043, Fixnum, Hash)>] InlineResponse20043 data, response status code and response headers
    def create_session_with_http_info(start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.create_session ..."
      end
      # verify the required parameter 'start' is set
      fail ArgumentError, "Missing the required parameter 'start' when calling SessionApi.create_session" if start.nil?
      # resource path
      local_var_path = "/session/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'start'] = start
      query_params[:'boat_id'] = opts[:'boat_id'] if !opts[:'boat_id'].nil?
      query_params[:'trip_id'] = opts[:'trip_id'] if !opts[:'trip_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20043')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a session by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def delete_session(id, opts = {})
      data, _status_code, _headers = delete_session_with_http_info(id, opts)
      return data
    end

    # Delete a session by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def delete_session_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.delete_session ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SessionApi.delete_session" if id.nil?
      # resource path
      local_var_path = "/session/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a session by ID
    # 
    # @param id 
    # @param start 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :boat_id 
    # @return [InlineResponse20044]
    def edit_session(id, start, opts = {})
      data, _status_code, _headers = edit_session_with_http_info(id, start, opts)
      return data
    end

    # Update a session by ID
    # 
    # @param id 
    # @param start 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :boat_id 
    # @return [Array<(InlineResponse20044, Fixnum, Hash)>] InlineResponse20044 data, response status code and response headers
    def edit_session_with_http_info(id, start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.edit_session ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SessionApi.edit_session" if id.nil?
      # verify the required parameter 'start' is set
      fail ArgumentError, "Missing the required parameter 'start' when calling SessionApi.edit_session" if start.nil?
      # resource path
      local_var_path = "/session/edit".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'start'] = start
      query_params[:'boat_id'] = opts[:'boat_id'] if !opts[:'boat_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20044')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#edit_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all of tsessions that match a filter
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :after 
    # @option opts [Date] :before 
    # @option opts [Integer] :trip_id 
    # @option opts [Integer] :ticket_id 
    # @option opts [Integer] :package_id 
    # @option opts [Integer] :course_id 
    # @return [InlineResponse20045]
    def filter_sessions(opts = {})
      data, _status_code, _headers = filter_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all of tsessions that match a filter
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :after 
    # @option opts [Date] :before 
    # @option opts [Integer] :trip_id 
    # @option opts [Integer] :ticket_id 
    # @option opts [Integer] :package_id 
    # @option opts [Integer] :course_id 
    # @return [Array<(InlineResponse20045, Fixnum, Hash)>] InlineResponse20045 data, response status code and response headers
    def filter_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.filter_sessions ..."
      end
      # resource path
      local_var_path = "/session/filter".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'trip_id'] = opts[:'trip_id'] if !opts[:'trip_id'].nil?
      query_params[:'ticket_id'] = opts[:'ticket_id'] if !opts[:'ticket_id'].nil?
      query_params[:'package_id'] = opts[:'package_id'] if !opts[:'package_id'].nil?
      query_params[:'course_id'] = opts[:'course_id'] if !opts[:'course_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20045')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#filter_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Session>]
    def get_all_sessions(opts = {})
      data, _status_code, _headers = get_all_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Session>, Fixnum, Hash)>] Array<Session> data, response status code and response headers
    def get_all_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.get_all_sessions ..."
      end
      # resource path
      local_var_path = "/session/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Session>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_all_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Session>]
    def get_all_with_trashed_sessions(opts = {})
      data, _status_code, _headers = get_all_with_trashed_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Session>, Fixnum, Hash)>] Array<Session> data, response status code and response headers
    def get_all_with_trashed_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.get_all_with_trashed_sessions ..."
      end
      # resource path
      local_var_path = "/session/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Session>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_all_with_trashed_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the customer manifest for this session
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20043]
    def get_manifest(id, opts = {})
      data, _status_code, _headers = get_manifest_with_http_info(id, opts)
      return data
    end

    # Retrieve the customer manifest for this session
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20043, Fixnum, Hash)>] InlineResponse20043 data, response status code and response headers
    def get_manifest_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.get_manifest ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling SessionApi.get_manifest" if id.nil?
      # resource path
      local_var_path = "/session/manifest".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20043')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_manifest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a session by ID
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id 
    # @return [InlineResponse20043]
    def get_session(opts = {})
      data, _status_code, _headers = get_session_with_http_info(opts)
      return data
    end

    # Retrieve a session by ID
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id 
    # @return [Array<(InlineResponse20043, Fixnum, Hash)>] InlineResponse20043 data, response status code and response headers
    def get_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.get_session ..."
      end
      # resource path
      local_var_path = "/session".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20043')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all of todays sessions
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20045]
    def get_today_sessions(opts = {})
      data, _status_code, _headers = get_today_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all of todays sessions
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20045, Fixnum, Hash)>] InlineResponse20045 data, response status code and response headers
    def get_today_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.get_today_sessions ..."
      end
      # resource path
      local_var_path = "/session/today".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20045')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_today_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all of tommorows sessions
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20045]
    def get_tommorow_sessions(opts = {})
      data, _status_code, _headers = get_tommorow_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all of tommorows sessions
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20045, Fixnum, Hash)>] InlineResponse20045 data, response status code and response headers
    def get_tommorow_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SessionApi.get_tommorow_sessions ..."
      end
      # resource path
      local_var_path = "/session/tommorow".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20045')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionApi#get_tommorow_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
