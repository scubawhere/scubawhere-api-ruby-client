=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class TicketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new ticket
    # 
    # @param name 
    # @param trips 
    # @param prices 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Date] :available_from 
    # @option opts [Date] :available_until 
    # @option opts [BOOLEAN] :only_packaged 
    # @option opts [Array<Integer>] :boats 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [InlineResponse2014]
    def add_ticket(name, trips, prices, opts = {})
      data, _status_code, _headers = add_ticket_with_http_info(name, trips, prices, opts)
      return data
    end

    # Create a new ticket
    # 
    # @param name 
    # @param trips 
    # @param prices 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Date] :available_from 
    # @option opts [Date] :available_until 
    # @option opts [BOOLEAN] :only_packaged 
    # @option opts [Array<Integer>] :boats 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [Array<(InlineResponse2014, Fixnum, Hash)>] InlineResponse2014 data, response status code and response headers
    def add_ticket_with_http_info(name, trips, prices, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.add_ticket ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling TicketApi.add_ticket" if name.nil?
      # verify the required parameter 'trips' is set
      fail ArgumentError, "Missing the required parameter 'trips' when calling TicketApi.add_ticket" if trips.nil?
      # verify the required parameter 'prices' is set
      fail ArgumentError, "Missing the required parameter 'prices' when calling TicketApi.add_ticket" if prices.nil?
      # resource path
      local_var_path = "/ticket/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'trips'] = @api_client.build_collection_param(trips, :multi)
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'available_from'] = opts[:'available_from'] if !opts[:'available_from'].nil?
      query_params[:'available_until'] = opts[:'available_until'] if !opts[:'available_until'].nil?
      query_params[:'only_packaged'] = opts[:'only_packaged'] if !opts[:'only_packaged'].nil?
      query_params[:'boats'] = @api_client.build_collection_param(opts[:'boats'], :multi) if !opts[:'boats'].nil?
      query_params[:'boatrooms'] = @api_client.build_collection_param(opts[:'boatrooms'], :multi) if !opts[:'boatrooms'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(prices)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#add_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a ticket
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2014]
    def delete_ticket(name, opts = {})
      data, _status_code, _headers = delete_ticket_with_http_info(name, opts)
      return data
    end

    # Delete a ticket
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2014, Fixnum, Hash)>] InlineResponse2014 data, response status code and response headers
    def delete_ticket_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.delete_ticket ..."
      end
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling TicketApi.delete_ticket" if name.nil?
      # resource path
      local_var_path = "/ticket/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#delete_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing ticket
    # 
    # @param id 
    # @param name 
    # @param trips 
    # @param prices 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Date] :available_from 
    # @option opts [Date] :available_until 
    # @option opts [BOOLEAN] :only_packaged 
    # @option opts [Array<Integer>] :boats 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [InlineResponse2014]
    def edit_ticket(id, name, trips, prices, opts = {})
      data, _status_code, _headers = edit_ticket_with_http_info(id, name, trips, prices, opts)
      return data
    end

    # Update an existing ticket
    # 
    # @param id 
    # @param name 
    # @param trips 
    # @param prices 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description 
    # @option opts [Date] :available_from 
    # @option opts [Date] :available_until 
    # @option opts [BOOLEAN] :only_packaged 
    # @option opts [Array<Integer>] :boats 
    # @option opts [Array<Integer>] :boatrooms 
    # @return [Array<(InlineResponse2014, Fixnum, Hash)>] InlineResponse2014 data, response status code and response headers
    def edit_ticket_with_http_info(id, name, trips, prices, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.edit_ticket ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.edit_ticket" if id.nil?
      # verify the required parameter 'name' is set
      fail ArgumentError, "Missing the required parameter 'name' when calling TicketApi.edit_ticket" if name.nil?
      # verify the required parameter 'trips' is set
      fail ArgumentError, "Missing the required parameter 'trips' when calling TicketApi.edit_ticket" if trips.nil?
      # verify the required parameter 'prices' is set
      fail ArgumentError, "Missing the required parameter 'prices' when calling TicketApi.edit_ticket" if prices.nil?
      # resource path
      local_var_path = "/ticket/edit".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'name'] = name
      query_params[:'trips'] = @api_client.build_collection_param(trips, :multi)
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'available_from'] = opts[:'available_from'] if !opts[:'available_from'].nil?
      query_params[:'available_until'] = opts[:'available_until'] if !opts[:'available_until'].nil?
      query_params[:'only_packaged'] = opts[:'only_packaged'] if !opts[:'only_packaged'].nil?
      query_params[:'boats'] = @api_client.build_collection_param(opts[:'boats'], :multi) if !opts[:'boats'].nil?
      query_params[:'boatrooms'] = @api_client.build_collection_param(opts[:'boatrooms'], :multi) if !opts[:'boatrooms'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(prices)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#edit_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all tickets that are available to booked today
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Ticket>]
    def get_all_available_tickets(opts = {})
      data, _status_code, _headers = get_all_available_tickets_with_http_info(opts)
      return data
    end

    # Retrieve all tickets that are available to booked today
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Ticket>, Fixnum, Hash)>] Array<Ticket> data, response status code and response headers
    def get_all_available_tickets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.get_all_available_tickets ..."
      end
      # resource path
      local_var_path = "/ticket/only-available".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Ticket>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#get_all_available_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all tickets
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Ticket>]
    def get_all_tickets(opts = {})
      data, _status_code, _headers = get_all_tickets_with_http_info(opts)
      return data
    end

    # Retrieve all tickets
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Ticket>, Fixnum, Hash)>] Array<Ticket> data, response status code and response headers
    def get_all_tickets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.get_all_tickets ..."
      end
      # resource path
      local_var_path = "/ticket/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Ticket>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#get_all_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all tickets
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Ticket>]
    def get_all_with_trashed_tickets(opts = {})
      data, _status_code, _headers = get_all_with_trashed_tickets_with_http_info(opts)
      return data
    end

    # Retrieve all tickets
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Ticket>, Fixnum, Hash)>] Array<Ticket> data, response status code and response headers
    def get_all_with_trashed_tickets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.get_all_with_trashed_tickets ..."
      end
      # resource path
      local_var_path = "/ticket/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Ticket>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#get_all_with_trashed_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a ticket by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Ticket]
    def get_ticket(id, opts = {})
      data, _status_code, _headers = get_ticket_with_http_info(id, opts)
      return data
    end

    # Retrieve a ticket by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ticket, Fixnum, Hash)>] Ticket data, response status code and response headers
    def get_ticket_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TicketApi.get_ticket ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.get_ticket" if id.nil?
      # resource path
      local_var_path = "/ticket".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Ticket')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#get_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
