=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class CompanyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Attach a location to a company
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :description 
    # @option opts [Float] :latitude 
    # @option opts [Float] :longitude 
    # @return [InlineResponse20023]
    def attach_locations(opts = {})
      data, _status_code, _headers = attach_locations_with_http_info(opts)
      return data
    end

    # Attach a location to a company
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :description 
    # @option opts [Float] :latitude 
    # @option opts [Float] :longitude 
    # @return [Array<(InlineResponse20023, Fixnum, Hash)>] InlineResponse20023 data, response status code and response headers
    def attach_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.attach_locations ..."
      end
      # resource path
      local_var_path = "/company/add-location".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'latitude'] = opts[:'latitude'] if !opts[:'latitude'].nil?
      query_params[:'longitude'] = opts[:'longitude'] if !opts[:'longitude'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20023')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#attach_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the locations this Dive Centre uses
    # 
    # @param latitude 
    # @param longitude 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @return [InlineResponse20024]
    def get_locations(latitude, longitude, opts = {})
      data, _status_code, _headers = get_locations_with_http_info(latitude, longitude, opts)
      return data
    end

    # Retrieve the locations this Dive Centre uses
    # 
    # @param latitude 
    # @param longitude 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @return [Array<(InlineResponse20024, Fixnum, Hash)>] InlineResponse20024 data, response status code and response headers
    def get_locations_with_http_info(latitude, longitude, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.get_locations ..."
      end
      # verify the required parameter 'latitude' is set
      fail ArgumentError, "Missing the required parameter 'latitude' when calling CompanyApi.get_locations" if latitude.nil?
      # verify the required parameter 'longitude' is set
      fail ArgumentError, "Missing the required parameter 'longitude' when calling CompanyApi.get_locations" if longitude.nil?
      # resource path
      local_var_path = "/company/locations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20024')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#get_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the pick up schedule for a date
    # 
    # @param date 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20025]
    def get_pickup_schedule(date, opts = {})
      data, _status_code, _headers = get_pickup_schedule_with_http_info(date, opts)
      return data
    end

    # Retrieve the pick up schedule for a date
    # 
    # @param date 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20025, Fixnum, Hash)>] InlineResponse20025 data, response status code and response headers
    def get_pickup_schedule_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.get_pickup_schedule ..."
      end
      # verify the required parameter 'date' is set
      fail ArgumentError, "Missing the required parameter 'date' when calling CompanyApi.get_pickup_schedule" if date.nil?
      # resource path
      local_var_path = "/company/pick-up-schedule".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'date'] = date

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20025')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#get_pickup_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the companies information
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact 
    # @option opts [String] :description 
    # @option opts [String] :name 
    # @option opts [String] :address_1 
    # @option opts [String] :address_2 
    # @option opts [String] :city 
    # @option opts [String] :county 
    # @option opts [String] :postcode 
    # @option opts [Integer] :country_id 
    # @option opts [Integer] :currency_id 
    # @option opts [String] :business_phone 
    # @option opts [String] :business_email 
    # @option opts [String] :vat_number 
    # @option opts [String] :registration_number 
    # @option opts [String] :website 
    # @return [InlineResponse20026]
    def update_company(id, opts = {})
      data, _status_code, _headers = update_company_with_http_info(id, opts)
      return data
    end

    # Update the companies information
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact 
    # @option opts [String] :description 
    # @option opts [String] :name 
    # @option opts [String] :address_1 
    # @option opts [String] :address_2 
    # @option opts [String] :city 
    # @option opts [String] :county 
    # @option opts [String] :postcode 
    # @option opts [Integer] :country_id 
    # @option opts [Integer] :currency_id 
    # @option opts [String] :business_phone 
    # @option opts [String] :business_email 
    # @option opts [String] :vat_number 
    # @option opts [String] :registration_number 
    # @option opts [String] :website 
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def update_company_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.update_company ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CompanyApi.update_company" if id.nil?
      # resource path
      local_var_path = "/company/update".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'contact'] = opts[:'contact'] if !opts[:'contact'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'address_1'] = opts[:'address_1'] if !opts[:'address_1'].nil?
      query_params[:'address_2'] = opts[:'address_2'] if !opts[:'address_2'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'county'] = opts[:'county'] if !opts[:'county'].nil?
      query_params[:'postcode'] = opts[:'postcode'] if !opts[:'postcode'].nil?
      query_params[:'country_id'] = opts[:'country_id'] if !opts[:'country_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'business_phone'] = opts[:'business_phone'] if !opts[:'business_phone'].nil?
      query_params[:'business_email'] = opts[:'business_email'] if !opts[:'business_email'].nil?
      query_params[:'vat_number'] = opts[:'vat_number'] if !opts[:'vat_number'].nil?
      query_params[:'registration_number'] = opts[:'registration_number'] if !opts[:'registration_number'].nil?
      query_params[:'website'] = opts[:'website'] if !opts[:'website'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#update_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
