=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class BookingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add a package / course / ticket with its session to the booking
    # 
    # @param booking_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ticket_id 
    # @option opts [Integer] :session_id 
    # @option opts [Integer] :boatroom_id 
    # @option opts [Integer] :training_session_id 
    # @option opts [BOOLEAN] :temporary 
    # @option opts [Integer] :package_id 
    # @option opts [Integer] :packagefacade_id 
    # @option opts [Integer] :course_id 
    # @return [InlineResponse20010]
    def add_booking_detail(booking_id, customer_id, opts = {})
      data, _status_code, _headers = add_booking_detail_with_http_info(booking_id, customer_id, opts)
      return data
    end

    # Add a package / course / ticket with its session to the booking
    # 
    # @param booking_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :ticket_id 
    # @option opts [Integer] :session_id 
    # @option opts [Integer] :boatroom_id 
    # @option opts [Integer] :training_session_id 
    # @option opts [BOOLEAN] :temporary 
    # @option opts [Integer] :package_id 
    # @option opts [Integer] :packagefacade_id 
    # @option opts [Integer] :course_id 
    # @return [Array<(InlineResponse20010, Fixnum, Hash)>] InlineResponse20010 data, response status code and response headers
    def add_booking_detail_with_http_info(booking_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.add_booking_detail ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.add_booking_detail" if booking_id.nil?
      # verify the required parameter 'customer_id' is set
      fail ArgumentError, "Missing the required parameter 'customer_id' when calling BookingApi.add_booking_detail" if customer_id.nil?
      # resource path
      local_var_path = "/booking/add-detail".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'customer_id'] = customer_id
      query_params[:'ticket_id'] = opts[:'ticket_id'] if !opts[:'ticket_id'].nil?
      query_params[:'session_id'] = opts[:'session_id'] if !opts[:'session_id'].nil?
      query_params[:'boatroom_id'] = opts[:'boatroom_id'] if !opts[:'boatroom_id'].nil?
      query_params[:'training_session_id'] = opts[:'training_session_id'] if !opts[:'training_session_id'].nil?
      query_params[:'temporary'] = opts[:'temporary'] if !opts[:'temporary'].nil?
      query_params[:'package_id'] = opts[:'package_id'] if !opts[:'package_id'].nil?
      query_params[:'packagefacade_id'] = opts[:'packagefacade_id'] if !opts[:'packagefacade_id'].nil?
      query_params[:'course_id'] = opts[:'course_id'] if !opts[:'course_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20010')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#add_booking_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach an accommodation booking to a booking
    # 
    # @param booking_id 
    # @param accommodation_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start 
    # @option opts [Date] :_end 
    # @return [InlineResponse2008]
    def attach_accommodation(booking_id, accommodation_id, customer_id, opts = {})
      data, _status_code, _headers = attach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, opts)
      return data
    end

    # Attach an accommodation booking to a booking
    # 
    # @param booking_id 
    # @param accommodation_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start 
    # @option opts [Date] :_end 
    # @return [Array<(InlineResponse2008, Fixnum, Hash)>] InlineResponse2008 data, response status code and response headers
    def attach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.attach_accommodation ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.attach_accommodation" if booking_id.nil?
      # verify the required parameter 'accommodation_id' is set
      fail ArgumentError, "Missing the required parameter 'accommodation_id' when calling BookingApi.attach_accommodation" if accommodation_id.nil?
      # verify the required parameter 'customer_id' is set
      fail ArgumentError, "Missing the required parameter 'customer_id' when calling BookingApi.attach_accommodation" if customer_id.nil?
      # resource path
      local_var_path = "/booking/add-accommodation".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'accommodation_id'] = accommodation_id
      query_params[:'customer_id'] = customer_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2008')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#attach_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach an addon to a trip of a booking
    # 
    # @param booking_id 
    # @param bookingdetail_id 
    # @param addon_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :quantity 
    # @option opts [Integer] :packagefacade_id 
    # @return [InlineResponse2009]
    def attach_addon(booking_id, bookingdetail_id, addon_id, opts = {})
      data, _status_code, _headers = attach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, opts)
      return data
    end

    # Attach an addon to a trip of a booking
    # 
    # @param booking_id 
    # @param bookingdetail_id 
    # @param addon_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :quantity 
    # @option opts [Integer] :packagefacade_id 
    # @return [Array<(InlineResponse2009, Fixnum, Hash)>] InlineResponse2009 data, response status code and response headers
    def attach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.attach_addon ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.attach_addon" if booking_id.nil?
      # verify the required parameter 'bookingdetail_id' is set
      fail ArgumentError, "Missing the required parameter 'bookingdetail_id' when calling BookingApi.attach_addon" if bookingdetail_id.nil?
      # verify the required parameter 'addon_id' is set
      fail ArgumentError, "Missing the required parameter 'addon_id' when calling BookingApi.attach_addon" if addon_id.nil?
      # resource path
      local_var_path = "/booking/add-addon".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'bookingdetail_id'] = bookingdetail_id
      query_params[:'addon_id'] = addon_id
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?
      query_params[:'packagefacade_id'] = opts[:'packagefacade_id'] if !opts[:'packagefacade_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2009')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#attach_addon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach a pickup location for a booking
    # 
    # @param booking_id 
    # @param location 
    # @param date 
    # @param time 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20011]
    def attach_pickup(booking_id, location, date, time, opts = {})
      data, _status_code, _headers = attach_pickup_with_http_info(booking_id, location, date, time, opts)
      return data
    end

    # Attach a pickup location for a booking
    # 
    # @param booking_id 
    # @param location 
    # @param date 
    # @param time 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20011, Fixnum, Hash)>] InlineResponse20011 data, response status code and response headers
    def attach_pickup_with_http_info(booking_id, location, date, time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.attach_pickup ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.attach_pickup" if booking_id.nil?
      # verify the required parameter 'location' is set
      fail ArgumentError, "Missing the required parameter 'location' when calling BookingApi.attach_pickup" if location.nil?
      # verify the required parameter 'date' is set
      fail ArgumentError, "Missing the required parameter 'date' when calling BookingApi.attach_pickup" if date.nil?
      # verify the required parameter 'time' is set
      fail ArgumentError, "Missing the required parameter 'time' when calling BookingApi.attach_pickup" if time.nil?
      # resource path
      local_var_path = "/booking/add-pickup".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'location'] = location
      query_params[:'date'] = date
      query_params[:'time'] = time

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#attach_pickup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a booking
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def cancel_booking(booking_id, opts = {})
      data, _status_code, _headers = cancel_booking_with_http_info(booking_id, opts)
      return data
    end

    # Cancel a booking
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def cancel_booking_with_http_info(booking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.cancel_booking ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.cancel_booking" if booking_id.nil?
      # resource path
      local_var_path = "/booking/cancel".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#cancel_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Confirm a booking and all of its sessions and notify the lead customer
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20012]
    def confirm_booking(booking_id, opts = {})
      data, _status_code, _headers = confirm_booking_with_http_info(booking_id, opts)
      return data
    end

    # Confirm a booking and all of its sessions and notify the lead customer
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20012, Fixnum, Hash)>] InlineResponse20012 data, response status code and response headers
    def confirm_booking_with_http_info(booking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.confirm_booking ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.confirm_booking" if booking_id.nil?
      # resource path
      local_var_path = "/booking/confirm".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20012')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#confirm_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a booking by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def delete_booking(id, opts = {})
      data, _status_code, _headers = delete_booking_with_http_info(id, opts)
      return data
    end

    # Delete a booking by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def delete_booking_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.delete_booking ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BookingApi.delete_booking" if id.nil?
      # resource path
      local_var_path = "/booking/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#delete_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dettach an accommodation booking to a booking
    # 
    # @param booking_id 
    # @param accommodation_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start 
    # @return [InlineResponse20017]
    def dettach_accommodation(booking_id, accommodation_id, customer_id, opts = {})
      data, _status_code, _headers = dettach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, opts)
      return data
    end

    # Dettach an accommodation booking to a booking
    # 
    # @param booking_id 
    # @param accommodation_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start 
    # @return [Array<(InlineResponse20017, Fixnum, Hash)>] InlineResponse20017 data, response status code and response headers
    def dettach_accommodation_with_http_info(booking_id, accommodation_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.dettach_accommodation ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.dettach_accommodation" if booking_id.nil?
      # verify the required parameter 'accommodation_id' is set
      fail ArgumentError, "Missing the required parameter 'accommodation_id' when calling BookingApi.dettach_accommodation" if accommodation_id.nil?
      # verify the required parameter 'customer_id' is set
      fail ArgumentError, "Missing the required parameter 'customer_id' when calling BookingApi.dettach_accommodation" if customer_id.nil?
      # resource path
      local_var_path = "/booking/remove-accommodation".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'accommodation_id'] = accommodation_id
      query_params[:'customer_id'] = customer_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#dettach_accommodation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dettach an addon to a trip of a booking
    # 
    # @param booking_id 
    # @param bookingdetail_id 
    # @param addon_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :packagefacade_id 
    # @return [InlineResponse20017]
    def dettach_addon(booking_id, bookingdetail_id, addon_id, opts = {})
      data, _status_code, _headers = dettach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, opts)
      return data
    end

    # Dettach an addon to a trip of a booking
    # 
    # @param booking_id 
    # @param bookingdetail_id 
    # @param addon_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :packagefacade_id 
    # @return [Array<(InlineResponse20017, Fixnum, Hash)>] InlineResponse20017 data, response status code and response headers
    def dettach_addon_with_http_info(booking_id, bookingdetail_id, addon_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.dettach_addon ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.dettach_addon" if booking_id.nil?
      # verify the required parameter 'bookingdetail_id' is set
      fail ArgumentError, "Missing the required parameter 'bookingdetail_id' when calling BookingApi.dettach_addon" if bookingdetail_id.nil?
      # verify the required parameter 'addon_id' is set
      fail ArgumentError, "Missing the required parameter 'addon_id' when calling BookingApi.dettach_addon" if addon_id.nil?
      # resource path
      local_var_path = "/booking/remove-addon".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'bookingdetail_id'] = bookingdetail_id
      query_params[:'addon_id'] = addon_id
      query_params[:'packagefacade_id'] = opts[:'packagefacade_id'] if !opts[:'packagefacade_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#dettach_addon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dettach a pickup location for a booking
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id 
    # @return [InlineResponse2003]
    def dettach_pickup(booking_id, opts = {})
      data, _status_code, _headers = dettach_pickup_with_http_info(booking_id, opts)
      return data
    end

    # Dettach a pickup location for a booking
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id 
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def dettach_pickup_with_http_info(booking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.dettach_pickup ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.dettach_pickup" if booking_id.nil?
      # resource path
      local_var_path = "/booking/remove-pickup".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#dettach_pickup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit the information related to a booking
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :booking_id 
    # @option opts [Float] :discount 
    # @option opts [String] :comment 
    # @return [InlineResponse20014]
    def edit_booking_info(opts = {})
      data, _status_code, _headers = edit_booking_info_with_http_info(opts)
      return data
    end

    # Edit the information related to a booking
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :booking_id 
    # @option opts [Float] :discount 
    # @option opts [String] :comment 
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def edit_booking_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.edit_booking_info ..."
      end
      # resource path
      local_var_path = "/booking/edit-info".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = opts[:'booking_id'] if !opts[:'booking_id'].nil?
      query_params[:'discount'] = opts[:'discount'] if !opts[:'discount'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#edit_booking_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all bookings matching a filter
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reference 
    # @option opts [Date] :date 
    # @option opts [String] :lastname 
    # @return [InlineResponse20013]
    def filter_bookings(opts = {})
      data, _status_code, _headers = filter_bookings_with_http_info(opts)
      return data
    end

    # Get all bookings matching a filter
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reference 
    # @option opts [Date] :date 
    # @option opts [String] :lastname 
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def filter_bookings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.filter_bookings ..."
      end
      # resource path
      local_var_path = "/booking/filter".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'reference'] = opts[:'reference'] if !opts[:'reference'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'lastname'] = opts[:'lastname'] if !opts[:'lastname'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#filter_bookings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bookings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Booking>]
    def get_all_bookings(opts = {})
      data, _status_code, _headers = get_all_bookings_with_http_info(opts)
      return data
    end

    # Retrieve all bookings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Booking>, Fixnum, Hash)>] Array<Booking> data, response status code and response headers
    def get_all_bookings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_all_bookings ..."
      end
      # resource path
      local_var_path = "/booking/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Booking>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_all_bookings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all bookings including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Booking>]
    def get_all_with_trashed_bookings(opts = {})
      data, _status_code, _headers = get_all_with_trashed_bookings_with_http_info(opts)
      return data
    end

    # Retrieve all bookings including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Booking>, Fixnum, Hash)>] Array<Booking> data, response status code and response headers
    def get_all_with_trashed_bookings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_all_with_trashed_bookings ..."
      end
      # resource path
      local_var_path = "/booking/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Booking>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_all_with_trashed_bookings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a booking by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def get_booking(id, opts = {})
      data, _status_code, _headers = get_booking_with_http_info(id, opts)
      return data
    end

    # Retrieve a booking by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def get_booking_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_booking ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BookingApi.get_booking" if id.nil?
      # resource path
      local_var_path = "/booking".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all bookings for a customer
    # 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def get_customer_bookings(customer_id, opts = {})
      data, _status_code, _headers = get_customer_bookings_with_http_info(customer_id, opts)
      return data
    end

    # Get all bookings for a customer
    # 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def get_customer_bookings_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_customer_bookings ..."
      end
      # verify the required parameter 'customer_id' is set
      fail ArgumentError, "Missing the required parameter 'customer_id' when calling BookingApi.get_customer_bookings" if customer_id.nil?
      # resource path
      local_var_path = "/booking/customer".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'customer_id'] = customer_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_customer_bookings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all payments made for a booking
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :booking_id 
    # @return [InlineResponse20015]
    def get_payments(opts = {})
      data, _status_code, _headers = get_payments_with_http_info(opts)
      return data
    end

    # Retrieve all payments made for a booking
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :booking_id 
    # @return [Array<(InlineResponse20015, Fixnum, Hash)>] InlineResponse20015 data, response status code and response headers
    def get_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_payments ..."
      end
      # resource path
      local_var_path = "/booking/payments".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = opts[:'booking_id'] if !opts[:'booking_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20015')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all refunds for a booking
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :booking_id 
    # @return [InlineResponse20016]
    def get_refunds(opts = {})
      data, _status_code, _headers = get_refunds_with_http_info(opts)
      return data
    end

    # Retrieve all refunds for a booking
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :booking_id 
    # @return [Array<(InlineResponse20016, Fixnum, Hash)>] InlineResponse20016 data, response status code and response headers
    def get_refunds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_refunds ..."
      end
      # resource path
      local_var_path = "/booking/refunds".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = opts[:'booking_id'] if !opts[:'booking_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20016')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all bookings made today
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def get_todays_bookings(opts = {})
      data, _status_code, _headers = get_todays_bookings_with_http_info(opts)
      return data
    end

    # Get all bookings made today
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def get_todays_bookings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_todays_bookings ..."
      end
      # resource path
      local_var_path = "/booking/today".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_todays_bookings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all bookings made today
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def get_tommorows_bookings(opts = {})
      data, _status_code, _headers = get_tommorows_bookings_with_http_info(opts)
      return data
    end

    # Get all bookings made today
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Fixnum, Hash)>] InlineResponse20013 data, response status code and response headers
    def get_tommorows_bookings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.get_tommorows_bookings ..."
      end
      # resource path
      local_var_path = "/booking/tommorow".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20013')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#get_tommorows_bookings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new empty booking
    # 
    # @param source 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :agent_id 
    # @option opts [String] :agent_reference 
    # @return [InlineResponse201]
    def init_booking(source, opts = {})
      data, _status_code, _headers = init_booking_with_http_info(source, opts)
      return data
    end

    # Create a new empty booking
    # 
    # @param source 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :agent_id 
    # @option opts [String] :agent_reference 
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def init_booking_with_http_info(source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.init_booking ..."
      end
      # verify the required parameter 'source' is set
      fail ArgumentError, "Missing the required parameter 'source' when calling BookingApi.init_booking" if source.nil?
      # resource path
      local_var_path = "/booking/init".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'agent_id'] = opts[:'agent_id'] if !opts[:'agent_id'].nil?
      query_params[:'agent_reference'] = opts[:'agent_reference'] if !opts[:'agent_reference'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#init_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a detail from a booking
    # 
    # @param booking_id 
    # @param bookingdetail_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20017]
    def remove_booking_detail(booking_id, bookingdetail_id, opts = {})
      data, _status_code, _headers = remove_booking_detail_with_http_info(booking_id, bookingdetail_id, opts)
      return data
    end

    # Remove a detail from a booking
    # 
    # @param booking_id 
    # @param bookingdetail_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20017, Fixnum, Hash)>] InlineResponse20017 data, response status code and response headers
    def remove_booking_detail_with_http_info(booking_id, bookingdetail_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.remove_booking_detail ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.remove_booking_detail" if booking_id.nil?
      # verify the required parameter 'bookingdetail_id' is set
      fail ArgumentError, "Missing the required parameter 'bookingdetail_id' when calling BookingApi.remove_booking_detail" if bookingdetail_id.nil?
      # resource path
      local_var_path = "/booking/remove-detail".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'bookingdetail_id'] = bookingdetail_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20017')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#remove_booking_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend the confirmation email to the lead customer
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def resend_confirmation(booking_id, opts = {})
      data, _status_code, _headers = resend_confirmation_with_http_info(booking_id, opts)
      return data
    end

    # Resend the confirmation email to the lead customer
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def resend_confirmation_with_http_info(booking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.resend_confirmation ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.resend_confirmation" if booking_id.nil?
      # resource path
      local_var_path = "/booking/resend-confirmation".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#resend_confirmation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reserve a booking and its sessions capcity until a set date
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :reserved_until 
    # @return [InlineResponse20018]
    def reserve_booking(booking_id, opts = {})
      data, _status_code, _headers = reserve_booking_with_http_info(booking_id, opts)
      return data
    end

    # Reserve a booking and its sessions capcity until a set date
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :reserved_until 
    # @return [Array<(InlineResponse20018, Fixnum, Hash)>] InlineResponse20018 data, response status code and response headers
    def reserve_booking_with_http_info(booking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.reserve_booking ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.reserve_booking" if booking_id.nil?
      # resource path
      local_var_path = "/booking/reserve".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'reserved_until'] = opts[:'reserved_until'] if !opts[:'reserved_until'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20018')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#reserve_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a booking as a quote and release all capacity of sessions
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def save_booking(booking_id, opts = {})
      data, _status_code, _headers = save_booking_with_http_info(booking_id, opts)
      return data
    end

    # Save a booking as a quote and release all capacity of sessions
    # 
    # @param booking_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def save_booking_with_http_info(booking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.save_booking ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.save_booking" if booking_id.nil?
      # resource path
      local_var_path = "/booking/save".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#save_booking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the lead customer for a booking
    # 
    # @param booking_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def set_lead_customer(booking_id, customer_id, opts = {})
      data, _status_code, _headers = set_lead_customer_with_http_info(booking_id, customer_id, opts)
      return data
    end

    # Set the lead customer for a booking
    # 
    # @param booking_id 
    # @param customer_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def set_lead_customer_with_http_info(booking_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BookingApi.set_lead_customer ..."
      end
      # verify the required parameter 'booking_id' is set
      fail ArgumentError, "Missing the required parameter 'booking_id' when calling BookingApi.set_lead_customer" if booking_id.nil?
      # verify the required parameter 'customer_id' is set
      fail ArgumentError, "Missing the required parameter 'customer_id' when calling BookingApi.set_lead_customer" if customer_id.nil?
      # resource path
      local_var_path = "/booking/set-lead".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'booking_id'] = booking_id
      query_params[:'customer_id'] = customer_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingApi#set_lead_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
