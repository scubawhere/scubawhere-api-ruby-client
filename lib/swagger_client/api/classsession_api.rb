=begin
#Scubawhere API Documentation

#This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 

OpenAPI spec version: 1.0.0
Contact: bryan@scubawhere.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ClasssessionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve a class session by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [TrainingSession]
    def class_session_get(id, opts = {})
      data, _status_code, _headers = class_session_get_with_http_info(id, opts)
      return data
    end

    # Retrieve a class session by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrainingSession, Fixnum, Hash)>] TrainingSession data, response status code and response headers
    def class_session_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.class_session_get ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ClasssessionApi.class_session_get" if id.nil?
      # resource path
      local_var_path = "/class-session".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrainingSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#class_session_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new class session
    # 
    # @param start 
    # @param training_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20019]
    def create_class_session(start, training_id, opts = {})
      data, _status_code, _headers = create_class_session_with_http_info(start, training_id, opts)
      return data
    end

    # Create a new class session
    # 
    # @param start 
    # @param training_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20019, Fixnum, Hash)>] InlineResponse20019 data, response status code and response headers
    def create_class_session_with_http_info(start, training_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.create_class_session ..."
      end
      # verify the required parameter 'start' is set
      fail ArgumentError, "Missing the required parameter 'start' when calling ClasssessionApi.create_class_session" if start.nil?
      # verify the required parameter 'training_id' is set
      fail ArgumentError, "Missing the required parameter 'training_id' when calling ClasssessionApi.create_class_session" if training_id.nil?
      # resource path
      local_var_path = "/class-session/add".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'start'] = start
      query_params[:'training_id'] = training_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20019')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#create_class_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a class session by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def delete_classsession(id, opts = {})
      data, _status_code, _headers = delete_classsession_with_http_info(id, opts)
      return data
    end

    # Delete a class session by ID
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def delete_classsession_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.delete_classsession ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ClasssessionApi.delete_classsession" if id.nil?
      # resource path
      local_var_path = "/class-session/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#delete_classsession\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a class session by ID
    # 
    # @param id 
    # @param start 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20020]
    def edit_class_session(id, start, opts = {})
      data, _status_code, _headers = edit_class_session_with_http_info(id, start, opts)
      return data
    end

    # Update a class session by ID
    # 
    # @param id 
    # @param start 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20020, Fixnum, Hash)>] InlineResponse20020 data, response status code and response headers
    def edit_class_session_with_http_info(id, start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.edit_class_session ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ClasssessionApi.edit_class_session" if id.nil?
      # verify the required parameter 'start' is set
      fail ArgumentError, "Missing the required parameter 'start' when calling ClasssessionApi.edit_class_session" if start.nil?
      # resource path
      local_var_path = "/class-session/edit".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'start'] = start

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20020')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#edit_class_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all class sessions that match a filter
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<TrainingSession>]
    def filter_class_session(opts = {})
      data, _status_code, _headers = filter_class_session_with_http_info(opts)
      return data
    end

    # Retrieve all class sessions that match a filter
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrainingSession>, Fixnum, Hash)>] Array<TrainingSession> data, response status code and response headers
    def filter_class_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.filter_class_session ..."
      end
      # resource path
      local_var_path = "/class-session/filter".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrainingSession>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#filter_class_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all class sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<TrainingSession>]
    def get_all_class_sessions(opts = {})
      data, _status_code, _headers = get_all_class_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all class sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrainingSession>, Fixnum, Hash)>] Array<TrainingSession> data, response status code and response headers
    def get_all_class_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.get_all_class_sessions ..."
      end
      # resource path
      local_var_path = "/class-session/all".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrainingSession>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#get_all_class_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all class sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<TrainingSession>]
    def get_all_with_trashed_class_sessions(opts = {})
      data, _status_code, _headers = get_all_with_trashed_class_sessions_with_http_info(opts)
      return data
    end

    # Retrieve all class sessions including any deleted models
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrainingSession>, Fixnum, Hash)>] Array<TrainingSession> data, response status code and response headers
    def get_all_with_trashed_class_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.get_all_with_trashed_class_sessions ..."
      end
      # resource path
      local_var_path = "/class-session/all-with-trashed".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrainingSession>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#get_all_with_trashed_class_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the customer manifest for a class session
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [TrainingSessionManifest]
    def get_class_session_manifest(id, opts = {})
      data, _status_code, _headers = get_class_session_manifest_with_http_info(id, opts)
      return data
    end

    # Retrieve the customer manifest for a class session
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrainingSessionManifest, Fixnum, Hash)>] TrainingSessionManifest data, response status code and response headers
    def get_class_session_manifest_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.get_class_session_manifest ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ClasssessionApi.get_class_session_manifest" if id.nil?
      # resource path
      local_var_path = "/class-session/manifest".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrainingSessionManifest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#get_class_session_manifest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all class sessions that start today
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<TrainingSession>]
    def get_todays_class_session(opts = {})
      data, _status_code, _headers = get_todays_class_session_with_http_info(opts)
      return data
    end

    # Retrieve all class sessions that start today
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrainingSession>, Fixnum, Hash)>] Array<TrainingSession> data, response status code and response headers
    def get_todays_class_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.get_todays_class_session ..."
      end
      # resource path
      local_var_path = "/class-session/today".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrainingSession>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#get_todays_class_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all class sessions that start tommorow
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<TrainingSession>]
    def get_tommorows_class_session(opts = {})
      data, _status_code, _headers = get_tommorows_class_session_with_http_info(opts)
      return data
    end

    # Retrieve all class sessions that start tommorow
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TrainingSession>, Fixnum, Hash)>] Array<TrainingSession> data, response status code and response headers
    def get_tommorows_class_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ClasssessionApi.get_tommorows_class_session ..."
      end
      # resource path
      local_var_path = "/class-session/tommorow".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TrainingSession>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClasssessionApi#get_tommorows_class_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
